{
  "name": "fdom",
  "version": "0.8.0",
  "description": "Functional thinking inspired DOM helpers (browserify and selective require friendly)",
  "main": "index.js",
  "scripts": {
    "test": "node test/all.js",
    "gendocs": "gendocs > README.md"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/DamonOehlman/fdom.git"
  },
  "keywords": [
    "dom",
    "manipulation",
    "extraction",
    "qsa",
    "functional"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/DamonOehlman/fdom/issues"
  },
  "devDependencies": {
    "crel": "^1.1.1",
    "tape": "^2.10.2",
    "async": "^0.2.10",
    "pull-stream": "~2.21.0",
    "simkey": "~0.2.0"
  },
  "testling": {
    "files": "test/all.js",
    "browsers": [
      "ie/9..latest",
      "firefox/20..latest",
      "firefox/nightly",
      "chrome/25..latest",
      "chrome/canary",
      "safari/latest",
      "opera/15..latest",
      "opera/next",
      "iphone/latest",
      "ipad/latest",
      "android/latest"
    ]
  },
  "readme": "# fdom\n\nA set of DOM utilities, which were first created in\n[cog](https://github.com/DamonOehlman/cog) but have been extracted as cog\nis more a JS language toolset, and `fdom` is it's DOM counterpart.\n\nAs per `cog` it is designed to be used as in a cherry-picking way rather\nthan by simply requiring `fdom` as a whole module.\n\n\n[![NPM](https://nodei.co/npm/fdom.png)](https://nodei.co/npm/fdom/)\n\n\n[![browser support](https://ci.testling.com/DamonOehlman/fdom.png)](https://ci.testling.com/DamonOehlman/fdom)\n\n\n## Modules\n\nThe following is a list of modules that `fdom` provides. Examples demonstrate\nhow to `require` and use them in your code.\n\n### append\n\n```js\nvar append = require('fdom/append');\n```\n\n#### append.to(target, => child) => child\n\nAppend the specified `child` element to the `target` element using the\nfamiliar `appendChild` method of the target.\n\n```js\nvar append = require('fdom/append');\nvar crel = require('crel');\n\n// create a list container, appending it to the document body\nvar list = append.to(document.body, crel('ul'));\n\n// create items in the list for each of the fruits in the list\n['apple', 'banana', 'pear', 'orange']\n  .map(function(fruit) {\n    return crel('li', fruit)\n  })\n  .map(append.to(list));\n\n```\n\n### classtweak(operations, => el)\n\nA functional helper for making\n[classList](http://www.w3.org/TR/domcore/#dom-element-classlist)\nmodifications to elements, supporting partial application.\n\n```js\nvar tweak = require('fdom/classtweak');\nvar qsa = require('fdom/qsa');\n\n// add a class to the document body\ntweak('+test', document.body);\n\n// remove the class\ntweak('-test', document.body);\n\n// toggle a class (! operator also works)\ntweak('~test', document.body);\n\n// apply an active class to all matching section tags\nqsa('section').forEach(tweak('+active'));\n```\n\n### get-attributes\n\n```\nf(regex, => el) => { attr1: val, attr2: val }\n```\n\nThis is a simple but useful attribute extractor that can be used to pull\nattributes that match a particular pattern from an element. The primary\nuse case is around custom attributes (such as those used in\n[AngularJS](http://angularjs.org/)) but could also be used to extract\nyour own `dataset` attribute collection from an element.\n\n```js\n/*\nimagine we have the following html:\n\n<html>\n<body>\n<video id=\"test\" rtc-remote=\"customer\" rtc-stream=\"main\"></video>\n</body>\n</html>\n*/\n\nvar getAttributes = require('../get-attributes');\nvar el = document.getElementById('test');\n\nconsole.log(getAttributes(/^(?:rtc-|data-rtc-|rtc\\:)(.*)$/, el));\n// --> { remote: 'customer', stream: 'main' }\n```\n\n### loader(urls, opts?, callback)\n\nThis is a simple script loader that will load the urls specified\nand trigger the callback once all those scripts have been loaded (or\nloading has failed in one instance).\n\n```js\nvar loader = require('fdom/loader');\nvar scripts = [\n  '//cdnjs.cloudflare.com/ajax/libs/ace/1.1.01/ace.js',\n  '//cdnjs.cloudflare.com/ajax/libs/chainvas/2.1/chainvas.js'\n];\n\nloader(scripts, function() {\n  console.log('loaded');\n});\n```\n\n### meta(regex?)\n\nFind all the `<meta>` tags that have a name attribute and collate as a\nsimple JS objects whether the content of the tag is the value.\n\n```js\n/*\ngiven the following html:\n\n<html>\n<head>\n<meta name=\"foo\" content=\"bar\">\n<meta name=\"app\" content=\"wonderful\">\n<meta name=\"fdom-name\" content=\"fred\">\n<meta name=\"fdom-title\" content=\"sir\">\n</head>\n<body>\n</body>\n</html>\n*/\n\nvar meta = require('fdom/meta');\n\n// get all the attributes\nconsole.log(meta());\n// --> { foo: 'bar', app: 'wonderful', 'fdom-name': 'fred', 'fdom-title': 'sir' }\n\n// get only attributes matching a regex\nconsole.log(meta(/^foo/));\n// --> { foo: 'bar' }\n\n// get capture group 1 matched\nconsole.log(meta(/^fdom-(.*)$/));\n// --> { name: 'fred', title: 'sir' }\n```\n\n### next\n\n```\nf(name, el) => fn\n```\n\nThe `next` function is used to pull event data from `el` for the event\nnamed `name`.  This can be useful when combined with a\n[pull-stream](https://github.com/dominictarr/pull-stream) to capture\na stream of events from a DOM elements.\n\n```js\nvar pull = require('pull-stream');\nvar next = require('fdom/next');\n\npull(\n  pull.Source(next('keydown', document)),\n  pull.log()\n);\n```\n\n### on\n\n```\nf(name, => el, => cb)\n```\n\nThe `on` helper assists with working with DOM events and being able to map\nthose to a node callback style function in the form:\n\n```js\nfunction(err, evt) {\n}\n```\n\nWhen the event is triggered by the `el` the callback is fired passing\na null value to the `err` argument.\n\n```js\nvar async = require('async');\nvar crel = require('crel');\nvar waitLoad = require('fdom/on')('load');\nvar scripts = [\n  '//cdnjs.cloudflare.com/ajax/libs/ace/1.1.01/ace.js',\n  '//cdnjs.cloudflare.com/ajax/libs/chainvas/2.1/chainvas.js'\n];\n\n// create the script elements\nscripts = scripts.map(function(url) {\n  var el = crel('script', { src: url });\n  document.body.appendChild(el);\n\n  return el;\n})\n\nasync.parallel(scripts.map(waitLoad), function(err) {\n  console.log('all scripts loaded');\n});\n```\n\n### qsa(selector, scope?)\n\nThis function is used to get the results of the querySelectorAll output\nin the fastest possible way.  This code is very much based on the\nimplementation in\n[zepto](https://github.com/madrobby/zepto/blob/master/src/zepto.js#L104),\nbut perhaps not quite as terse.\n\n```js\nvar qsa = require('fdom/qsa');\n```\n\n### raf(callback)\n\nRequest animation frame helper.\n\n```js\nvar raf = require('fdom/raf');\n\nfunction animate() {\n  console.log('animating');\n  raf(animate); // go again\n}\n\nraf(animate);\n```\n\n### remove(el)\n\nRemove the specified target element from the DOM.\n\n## License(s)\n\n### MIT\n\nCopyright (c) 2014 Damon Oehlman <damon.oehlman@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/DamonOehlman/fdom",
  "_id": "fdom@0.8.0",
  "dist": {
    "shasum": "7bcc17a9ae7f0d37ffb98ba4ff68a893f751e49c"
  },
  "_from": "fdom@^0.8.0",
  "_resolved": "https://registry.npmjs.org/fdom/-/fdom-0.8.0.tgz"
}
