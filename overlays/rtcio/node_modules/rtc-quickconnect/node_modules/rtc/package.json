{
  "name": "rtc",
  "description": "Cross-browser WebRTC helpers",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@nicta.com.au"
  },
  "version": "1.1.1",
  "dependencies": {
    "rtc-core": "^1",
    "cog": "~0.5.3",
    "async": "~0.6.2"
  },
  "peerDependencies": {
    "rtc-signaller": "^1"
  },
  "devDependencies": {
    "tape": "^2",
    "uuid": "^1",
    "messenger-memory": "^1",
    "rtc-media": "^1",
    "rtc-signaller": "^1",
    "testling": "^1",
    "rtc-switchboard": "^0.10.1",
    "freeice": "^0.2.1",
    "peerpair": "^0.4.1"
  },
  "scripts": {
    "test": "testling -x ./.travis/start-$BROWSER.sh",
    "gendocs": "gendocs > README.md"
  },
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rtc-io/rtc.git"
  },
  "keywords": [
    "webrtc",
    "rtc.io"
  ],
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/rtc-io/rtc/issues"
  },
  "testling": {
    "files": "test/all.js",
    "server": "test/server.js"
  },
  "contributors": [
    {
      "name": "Damon Oehlman",
      "email": "damon.oehlman@nicta.com.au",
      "url": "https://github.com/DamonOehlman"
    },
    {
      "name": "Silvia Pfeiffer",
      "email": "silvia.pfeiffer@nicta.com.au",
      "url": "https://github.com/silviapfeiffer"
    }
  ],
  "readme": "# rtc\n\nThe `rtc` module does most of the heavy lifting within the\n[rtc.io](http://rtc.io) suite.  Primarily it handles the logic of coupling\na local `RTCPeerConnection` with it's remote counterpart via an\n[rtc-signaller](https://github.com/rtc-io/rtc-signaller) signalling\nchannel.\n\n\n[![NPM](https://nodei.co/npm/rtc.png)](https://nodei.co/npm/rtc/)\n\n[![Build Status](https://img.shields.io/travis/rtc-io/rtc.svg?branch=master)](https://travis-ci.org/rtc-io/rtc)\n![unstable](https://img.shields.io/badge/stability-unstable-yellowgreen.svg)\n\n[![Gitter chat](https://badges.gitter.im/rtc-io/discuss.png)](https://gitter.im/rtc-io/discuss)\n\n\n## Getting Started\n\nIf you decide that the `rtc` module is a better fit for you than either\n[rtc-quickconnect](https://github.com/rtc-io/rtc-quickconnect) or\n[rtc-glue](https://github.com/rtc-io/rtc-glue) then the code snippet below\nwill provide you a guide on how to get started using it in conjunction with\nthe [rtc-signaller](https://github.com/rtc-io/rtc-signaller) and\n[rtc-media](https://github.com/rtc-io/rtc-media) modules:\n\n```js\nvar signaller = require('rtc-signaller')('http://rtc.io/switchboard/');\nvar rtc = require('rtc');\nvar media = require('rtc-media');\nvar localMedia = media();\n\n// render the local media to the document body\nlocalMedia.render(document.body);\n\n// capture local media first as firefox\n// will want a local stream and doesn't support onnegotiationneeded event\nlocalMedia.once('capture', function(localStream) {\n  // look for friends\n  signaller.on('peer:announce', function(data) {\n    // create a peer connection for our new friend\n    var pc = rtc.createConnection();\n\n    // couple our connection via the signalling channel\n    var monitor = rtc.couple(pc, data.id, signaller);\n\n    // add the stream to the connection\n    pc.addStream(localStream);\n\n    // once the connection is active, log a console message\n    monitor.once('connected', function() {\n      console.log('connection active to: ' + data.id);\n  \n      pc.getRemoteStreams().forEach(function(stream) {\n        media(stream).render(document.body);\n      });\n    });\n\n\n    monitor.createOffer();\n  });\n\n  // announce ourself in the rtc-getting-started room\n  signaller.announce({ room: 'rtc-getting-started' });\n});\n\n\n```\n\nThis code definitely doesn't cover all the cases that you need to consider\n(i.e. peers leaving, etc) but it should demonstrate how to:\n\n1. Capture video and add it to a peer connection\n2. Couple a local peer connection with a remote peer connection\n3. Deal with the remote steam being discovered and how to render\n   that to the local interface.\n\n## Reference\n\n### rtc.createConnection\n\n```\ncreateConnection(opts?, constraints?) => RTCPeerConnection\n```\n\nCreate a new `RTCPeerConnection` auto generating default opts as required.\n\n```js\nvar conn;\n\n// this is ok\nconn = rtc.createConnection();\n\n// and so is this\nconn = rtc.createConnection({\n  iceServers: []\n});\n```\n\n### rtc/cleanup\n\n```\ncleanup(pc)\n```\n\nThe `cleanup` function is used to ensure that a peer connection is properly\nclosed and ready to be cleaned up by the browser.\n\n### rtc/couple\n\n#### couple(pc, targetId, signaller, opts?)\n\nCouple a WebRTC connection with another webrtc connection identified by\n`targetId` via the signaller.\n\nThe following options can be provided in the `opts` argument:\n\n- `sdpfilter` (default: null)\n\n  A simple function for filtering SDP as part of the peer\n  connection handshake (see the Using Filters details below).\n\n##### Example Usage\n\n```js\nvar couple = require('rtc/couple');\n\ncouple(pc, '54879965-ce43-426e-a8ef-09ac1e39a16d', signaller);\n```\n\n##### Using Filters\n\nIn certain instances you may wish to modify the raw SDP that is provided\nby the `createOffer` and `createAnswer` calls.  This can be done by passing\na `sdpfilter` function (or array) in the options.  For example:\n\n```js\n// run the sdp from through a local tweakSdp function.\ncouple(pc, '54879965-ce43-426e-a8ef-09ac1e39a16d', signaller, {\n  sdpfilter: tweakSdp\n});\n```\n\n### rtc/detect\n\nProvide the [rtc-core/detect](https://github.com/rtc-io/rtc-core#detect) \nfunctionality.\n\n### rtc/generators\n\nThe generators package provides some utility methods for generating\nconstraint objects and similar constructs.\n\n```js\nvar generators = require('rtc/generators');\n```\n\n#### generators.config(config)\n\nGenerate a configuration object suitable for passing into an W3C\nRTCPeerConnection constructor first argument, based on our custom config.\n\n#### generators.connectionConstraints(flags, constraints)\n\nThis is a helper function that will generate appropriate connection\nconstraints for a new `RTCPeerConnection` object which is constructed\nin the following way:\n\n```js\nvar conn = new RTCPeerConnection(flags, constraints);\n```\n\nIn most cases the constraints object can be left empty, but when creating\ndata channels some additional options are required.  This function\ncan generate those additional options and intelligently combine any\nuser defined constraints (in `constraints`) with shorthand flags that\nmight be passed while using the `rtc.createConnection` helper.\n\n### rtc/monitor\n\n```\nmonitor(pc, targetId, signaller, opts?) => EventEmitter\n```\n\nThe monitor is a useful tool for determining the state of `pc` (an\n`RTCPeerConnection`) instance in the context of your application. The\nmonitor uses both the `iceConnectionState` information of the peer\nconnection and also the various\n[signaller events](https://github.com/rtc-io/rtc-signaller#signaller-events)\nto determine when the connection has been `connected` and when it has\nbeen `disconnected`.\n\nA monitor created `EventEmitter` is returned as the result of a\n[couple](https://github.com/rtc-io/rtc#rtccouple) between a local peer\nconnection and it's remote counterpart.\n\n## License(s)\n\n### Apache 2.0\n\nCopyright 2014 National ICT Australia Limited (NICTA)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/rtc-io/rtc",
  "_id": "rtc@1.1.1",
  "dist": {
    "shasum": "cba87687488c1f09bd3b5fc16ec1bc90b87e8c80"
  },
  "_from": "rtc@^1",
  "_resolved": "https://registry.npmjs.org/rtc/-/rtc-1.1.1.tgz"
}
