{
  "name": "rtc-switchboard",
  "version": "0.10.1",
  "description": "Signalling for rtc-io components using primus",
  "main": "index.js",
  "scripts": {
    "test": "node test/all.js",
    "gendocs": "gendocs > README.md",
    "start": "node server.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rtc-io/rtc-switchboard.git"
  },
  "keywords": [
    "rtc.io",
    "webrtc",
    "signalling",
    "primus"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@nicta.com.au"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/rtc-io/rtc-switchboard/issues"
  },
  "dependencies": {
    "primus": "^2.1.2",
    "ws": "~0.4.31",
    "debug": "^0.8.0",
    "through": "~2.3.4",
    "collections": "^2.0.0",
    "cog": "~0.5.1"
  },
  "devDependencies": {
    "tape": "^2.12.1",
    "rtc-signaller": "^0.19.2",
    "uuid": "~1.4.1",
    "express": "^3.5.1",
    "bunyan": "~0.22.1"
  },
  "contributors": [
    {
      "name": "Damon Oehlman",
      "email": "damon.oehlman@nicta.com.au",
      "url": "https://github.com/DamonOehlman"
    },
    {
      "name": "Silvia Pfeiffer",
      "email": "silvia.pfeiffer@nicta.com.au",
      "url": "https://github.com/silviapfeiffer"
    }
  ],
  "readme": "# rtc-switchboard\n\nThis is an rtc.io signalling server (counterpart to\n[rtc-signaller](https://github.com/rtc-io/rtc-signaller)) that makes use of\nthe excellent realtime abstraction library,\n[primus](https://github.com/primus/primus). It has been designed and built\nprimarily as a _reference implementation_ for a signalling server and is\nnot designed to be deployed at scale.\n\n\n[![NPM](https://nodei.co/npm/rtc-switchboard.png)](https://nodei.co/npm/rtc-switchboard/)\n\n[![Build Status](https://img.shields.io/travis/rtc-io/rtc-switchboard.svg?branch=master)](https://travis-ci.org/rtc-io/rtc-switchboard)\n![unstable](https://img.shields.io/badge/stability-unstable-yellowgreen.svg)\n\n## Usage: Standalone\n\nIf you wish to use `rtc-switchboard` on it's own to test signalling,\nthen you can simply clone this repository, install dependencies and start\nthe server:\n\n```\ngit clone https://github.com/rtc-io/rtc-switchboard.git\ncd rtc-switchboard\nnpm install\nnode server.js\n```\n\nIf you wish to run the server on a specific port, then set the `SERVER_PORT`\nenvironment variable prior to execution:\n\n```\nSERVER_PORT=8997 node server.js\n```\n\n## Usage: API\n\nTo create an application using primus signalling, see the following\nexamples:\n\n### Pure Node HTTP\n\n```js\nvar server = require('http').createServer();\nvar switchboard = require('./')(server, { servelib: true });\nvar port = parseInt(process.env.NODE_PORT || process.env.PORT || process.argv[2], 10) || 3000;\n\n// start the server\nserver.listen(port, function(err) {\n  if (err) {\n    return console.log('Encountered error starting server: ', err);\n  }\n\n  console.log('server running on port: ' + port);\n});\n\n```\n\n### Using Express\n\n```js\nvar express = require('express');\nvar app = express();\nvar server = require('http').Server(app);\nvar port = process.env.PORT || 3000;\n\n// create the switchboard\nvar switchboard = require('rtc-switchboard')(server);\n\n// we need to expose the primus library\napp.get('/rtc.io/primus.js', switchboard.library());\n\nserver.listen(port, function(err) {\n  if (err) {\n    return;\n  }\n\n  console.log('server listening on port: ' + port);\n});\n```\n\n## Including the Primus Client\n\nThe `rtc-switchboard` makes use of the slick WebSockets abstraction library\n[Primus](https://github.com/primus/primus). To work with the server, you\nwill need to include the `primus.js` library in your application prior to\nattempting a websocket connection.\n\nIf you are working with a local standalone server, the following script\ntag will likely do the job:\n\n```html\n<script src=\"http://localhost:3000/rtc.io/primus.js\"></script>\n```\n\n__NOTE:__ A specific call to include primus is not required if you are\nworking with particular rtc.io library (such as\n[rtc-glue](https://github.com/rtc-io/rtc-glue)), as they will ensure the\nprimus library has been included prior to running their internal code.\n\n## Writing Custom Command Handlers\n\nWhen you initialize the switchboard, you are able to provide custom handlers\nfor specific commands that you want handled by the switchboard. Imagine\nfor instance, that we want our switchboard to do something clever when a\nclient sends an `/img` command.\n\nWe would create our server to include the custom `img` command handler:\n\n```js\nvar server = require('http').createServer();\nvar Primus = require('primus');\n\n// create the signaller, providing our own primus instance (using engine.io)\nvar switchboard = require('rtc-switchboard')(server, {\n  servelib: true,\n  handlers: {\n    img: require('./handlers/img')\n  }\n});\n\n// start the server\nserver.listen(3000);\n```\n\nAnd then we would write a small module for the handler:\n\n```js\nmodule.exports = function(mgr, spark, data, payload) {\n  console.log('received an img command with payload: ', payload);\n};\n```\n\n## Logging and Analytics using the `data` event\n\nEvery message that flows through the switchboard (whether handled or not)\ncan be logged through tapping into the `data` event.  The example below\ndemonstrates how this can be done with a node logging module like\n[bunyan](https://github.com/trentm/node-bunyan):\n\n```js\nvar express = require('express');\nvar app = express();\nvar server = require('http').Server(app);\nvar port = process.env.PORT || 3000;\nvar bunyan = require('bunyan');\nvar log = bunyan.createLogger({ name: 'rtc-switchboard' });\n\n// create the switchboard\nvar switchboard = require('rtc-switchboard')(server);\n\n// we need to expose the primus library\napp.get('/rtc.io/primus.js', switchboard.library());\n\nserver.listen(port, function(err) {\n  if (err) {\n    return;\n  }\n\n  console.log('server running at: http://localhost:' + port + '/');\n});\n\nswitchboard.on('data', function(data, peerId, spark) {\n  log.info({ peer: peerId }, 'received: ' + data);\n});\n```\n\nAs can be seen in the example above, the handlers of the `data` event can\nexpect to receive three arguments to the handler function, as per the code\nsnippet below:\n\n```js\nswitchboard.on('data', function(data, peerId, spark) {\n});\n```\n\nThe `data` is the raw data of that has been sent from the client, the\n`peerId` is the id of the peer sending the data (this will be `undefined` if\nit is a message received prior to an `/announce` command).  Finally we have\nthe raw primus `spark` that can be examined for additional information.\n\n## Reference\n\n### switchboard(server, opts?)\n\nCreate the switchboard which uses primus under the hood. By default calling\nthis function will create a new `Primus` instance and use the\npure [websockets adapter](https://github.com/primus/primus#websockets).\n\n### ConnectionManager(primus, opts)\n\nThe `ConnectionManager` is used to route messages from one peer to another.\nWhen a peer announces itself to the signalling server, if it has specified\na room, then general messages will only be routed to other peers in the\nsame room.\n\nAn exeption to this case is `/to` messages which are routed directly to\nthe specified peer.\n\n#### connect(spark)\n\nReturn a [through](https://github.com/dominictarr/through) stream for the\nspark that we can pipe the incoming data from the spark into to be handled\ncorrectly.\n\n#### createSocket(url)\n\nCreate a websocket client connection the underlying primus server.\n\n#### joinRoom(name, spark)\n\nJoin the room specified by `name`.\n\n#### library(req, res)\n\nWrite the library to the response\n\n#### _cleanupPeer(data)\n\nCleanup a peer when we receive a leave notification.\n\n### Room(name)\n\nThis is a simple helper class for encapsulating room details.\n\n#### leave(spark)\n\nRemove the specified spark from the room\n\n#### write(message, source)\n\nWrite `message` to all the sparks in the room, with the exception of the\n`source` spark.\n\n## Custom Message Handlers\n\nThe socket server is configured to handle some specific rtc.io signaller\nmessages.  The handlers are stored in the `handlers/` folder of the\nrepository and have details outlined below.\n\n### announce handler\n\nWill handle `/announce` messages and associate the peer id assigned by\nthe client-side signaller with the socket on the server side.\n\nThis will allow routing of messages to the correct receipient when\n`/to` messages are received.\n\n## License(s)\n\n### Apache 2.0\n\nCopyright 2014 National ICT Australia Limited (NICTA)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/rtc-io/rtc-switchboard",
  "_id": "rtc-switchboard@0.10.1",
  "dist": {
    "shasum": "4160c831ad4f058fcc9b07f3e95a7812214e2df4"
  },
  "_from": "rtc-switchboard@~0.10.1",
  "_resolved": "https://registry.npmjs.org/rtc-switchboard/-/rtc-switchboard-0.10.1.tgz"
}
