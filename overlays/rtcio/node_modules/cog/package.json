{
  "name": "cog",
  "description": "Cherry pickable JS functions",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@gmail.com"
  },
  "version": "0.5.3",
  "dependencies": {},
  "devDependencies": {
    "tape": "~2.4.2"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/DamonOehlman/cog.git"
  },
  "bugs": {
    "url": "http://github.com/DamonOehlman/cog/issues"
  },
  "scripts": {
    "gendocs": "gendocs > README.md",
    "test": "$(npm bin)/tape test/all.js"
  },
  "testling": {
    "files": "test/all.js",
    "browsers": {
      "ie": [
        9,
        10
      ],
      "ff": [
        23,
        24,
        25,
        "nightly"
      ],
      "chrome": [
        29,
        30,
        31,
        "canary"
      ],
      "safari": [
        5.1,
        6
      ],
      "opera": [
        15,
        16,
        17,
        "next"
      ]
    }
  },
  "homepage": "https://github.com/DamonOehlman/cog",
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "keywords": [
    "browserify",
    "utility",
    "cherrypick"
  ],
  "license": "MIT",
  "readme": "# cog\n\ncog is a collection of utility modules constructed in a\n[browserify](https://github.com/substack/node-browserify) friendly way.\n\n\n[![NPM](https://nodei.co/npm/cog.png)](https://nodei.co/npm/cog/)\n\n[![Build Status](https://travis-ci.org/DamonOehlman/cog.png?branch=master)](https://travis-ci.org/DamonOehlman/cog)\n\n[![browser support](https://ci.testling.com/DamonOehlman/cog.png)](https://ci.testling.com/DamonOehlman/cog)\n\n\n## Why would I want to use browserify?\n\nA lot of people don't like/get browserify.  Heck, I was one of those people.\nI can say now though, with hand on heart that it is in fact, awesome\n(since V2).  Let me explain why and at the same time explain how cog works.\n\nAt a very simple level browserify takes module import statements in the\nform of CommonJS style `require` calls and resolves dependencies into a\nuseful self-contained (as self-contained as you like, I might add) script\nthat can run in your browser.\n\nNot only that, but it only includes the parts of modules that are actually\nused in your code into the final output.  It does this using a technique\ncalled static analysis via a library called [esprima](http://esprima.org/).\n\n## Browserify, NPM and avoiding \"bigness\"\n\nThere's a lot of good stuff that can be learned from the way node and the\nnode community approaches modularity, which is well voiced in the following\npost by @maxogden (which also some info on cool new stuff):\n\n<http://maxogden.com/node-packaged-modules.html>\n\nIn a quest to avoid bigness though, sometimes we are creating the opposite\nproblem of \"littleness\" which is making it difficult for us as developers\nto talk about reusable code that is making our lives easier.  Back when\njQuery was the new hotness, it was really easy to communicate that to\nanother developer.  The same can probably be said about things such as\nBackbone and Underscore.\n\nSo while the bloat that came with those libraries was bad, the ability to\ncommunicate their usefulness quickly to our friends was not.\n\nI propose a different approach and cog is a demonstration of that. It's the\nbuild a collection of stuff where you only get what you need at runtime\napproach.\n\nSo let's get started. Let's do this by checking out some examples\nusing requirebin.\n\n## cog/defaults\n\n```js\nvar defaults = require('cog/defaults');\n```\n\n### defaults(target, *)\n\nShallow copy object properties from the supplied source objects (*) into\nthe target object, returning the target object once completed.  Do not,\nhowever, overwrite existing keys with new values:\n\n```js\ndefaults({ a: 1, b: 2 }, { c: 3 }, { d: 4 }, { b: 5 }));\n```\n\nSee an example on [requirebin](http://requirebin.com/?gist=6079475).\n\n## cog/extend\n\n```js\nvar extend = require('cog/extend');\n```\n\n### extend(target, *)\n\nShallow copy object properties from the supplied source objects (*) into\nthe target object, returning the target object once completed:\n\n```js\nextend({ a: 1, b: 2 }, { c: 3 }, { d: 4 }, { b: 5 }));\n```\n\nSee an example on [requirebin](http://requirebin.com/?gist=6079475).\n\n## cog/jsonparse\n\n```js\nvar jsonparse = require('cog/jsonparse');\n```\n\n### jsonparse(input)\n\nThis function will attempt to automatically detect stringified JSON, and\nwhen detected will parse into JSON objects.  The function looks for strings\nthat look and smell like stringified JSON, and if found attempts to\n`JSON.parse` the input into a valid object.\n\n## cog/listen\n\n```js\nvar listen = require('cog/listen');\n```\n\n### listen(target, events, capture?)\n\nThe `listen` function of cog provides a mechanism for capturing specific\nevents (named in the events array) and routing them through an\n`EventEmitter` that is returned from the function.\n\nWhile at a base level this has little apparent advantage over the using\nthe native `addEventListener` and `removeEventListener` methods available\nin the browser, the listen function also provides a patched in `stop`\nmethod which will decouple all event listeners from their target.\n\n## cog/loader\n\n```js\nvar loader = require('cog/loader');\n```\n\n### loader(urls, opts?, callback)\n\nThis is a simple script loader that will load the urls specified\nand trigger the callback once all those scripts have been loaded (or\nloading has failed in one instance).\n\n__NOTE:__ Deprecated, moved into [dd](https://github.com/DamonOehlman/dd)\n\n## cog/logger\n\n```js\nvar logger = require('cog/logger');\n```\n\nSimple browser logging offering similar functionality to the\n[debug](https://github.com/visionmedia/debug) module.\n\n### Usage\n\nCreate your self a new logging instance and give it a name:\n\n```js\nvar debug = logger('phil');\n```\n\nNow do some debugging:\n\n```js\ndebug('hello');\n```\n\nAt this stage, no log output will be generated because your logger is\ncurrently disabled.  Enable it:\n\n```js\nlogger.enable('phil');\n```\n\nNow do some more logger:\n\n```js\ndebug('Oh this is so much nicer :)');\n// --> phil: Oh this is some much nicer :)\n```\n\n### Reference\n\n#### logger(name)\n\nCreate a new logging instance.\n\n#### logger.reset()\n\nReset logging (remove the default console logger, flag all loggers as\ninactive, etc, etc.\n\n#### logger.to(target)\n\nAdd a logging target.  The logger must have a `log` method attached.\n\n#### logger.enable(names*)\n\nEnable logging via the named logging instances.  To enable logging via all\ninstances, you can pass a wildcard:\n\n```js\nlogger.enable('*');\n```\n\n__TODO:__ wildcard enablers\n\n## cog/qsa\n\n```js\nvar qsa = require('cog/qsa');\n```\n\n### qsa(selector, scope?)\n\nThis function is used to get the results of the querySelectorAll output\nin the fastest possible way.  This code is very much based on the\nimplementation in\n[zepto](https://github.com/madrobby/zepto/blob/master/src/zepto.js#L104),\nbut perhaps not quite as terse.\n\n__NOTE:__ Deprecated, moved into [dd](https://github.com/DamonOehlman/dd)\n\n## cog/raf\n\n```js\nvar raf = require('cog/raf');\n```\n\n### raf(callback)\n\nRequest animation frame helper:\n\n```js\nvar raf = require('cog/raf');\n\nfunction animate() {\n  console.log('animating');\n  raf(animate); // go again\n}\n\nraf(animate);\n```\n\n__NOTE:__ Deprecated, moved into [dd](https://github.com/DamonOehlman/dd)\n\n## cog/throttle\n\n```js\nvar throttle = require('cog/throttle');\n```\n\n### throttle(fn, delay)\n\nA cherry-pickable throttle function.  Used to throttle `fn` to ensure\nthat it can be called at most once every `delay` milliseconds.  Will\nfire first event immediately, ensuring the next event fired will occur\nat least `delay` milliseconds after the first, and so on.\n\n## License(s)\n\n### MIT\n\nCopyright (c) 2014 Damon Oehlman <damon.oehlman@gmail.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "cog@0.5.3",
  "dist": {
    "shasum": "588246865744ab1751c190baf4b6702c557939e5"
  },
  "_from": "cog@~0.5.1",
  "_resolved": "https://registry.npmjs.org/cog/-/cog-0.5.3.tgz"
}
