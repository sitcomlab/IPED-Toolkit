{
  "name": "rtc-captureconfig",
  "version": "0.4.0",
  "description": "Simple string definition -> WebRTC constraints",
  "main": "index.js",
  "scripts": {
    "test": "node test/all.js",
    "gendocs": "gendocs > README.md"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rtc-io/rtc-captureconfig.git"
  },
  "keywords": [
    "webrtc",
    "rtc.io"
  ],
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@nicta.com.au"
  },
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/rtc-io/rtc-captureconfig/issues"
  },
  "devDependencies": {
    "tape": "~2.1.0",
    "rtc-media": "~1.1.0",
    "getusermedia": "~0.2.1"
  },
  "contributors": [
    {
      "name": "Damon Oehlman",
      "email": "damon.oehlman@nicta.com.au",
      "url": "https://github.com/DamonOehlman"
    },
    {
      "name": "Silvia Pfeiffer",
      "email": "silvia.pfeiffer@nicta.com.au",
      "url": "https://github.com/silviapfeiffer"
    }
  ],
  "readme": "# rtc-captureconfig\n\nThis is a simple parser that takes a string of text and determines what\nthat means in the context of WebRTC.\n\n\n[![NPM](https://nodei.co/npm/rtc-captureconfig.png)](https://nodei.co/npm/rtc-captureconfig/)\n\n[![Build Status](https://travis-ci.org/rtc-io/rtc-captureconfig.png?branch=master)](https://travis-ci.org/rtc-io/rtc-captureconfig)\n[![unstable](http://hughsk.github.io/stability-badges/dist/unstable.svg)](http://github.com/hughsk/stability-badges)\n\n## Why?\n\nIt provides a simple, textual way of describing your requirements for\nmedia capture.  Trying to remember the structure of the constraints object\nis painful.\n\n## How\n\nA simple text string is converted to an intermediate JS object\nrepresentation, which can then be converted to a getUserMedia constraints\ndata structure using a `toConstraints()` call.\n\nFor example, the following text input:\n\n```\ncamera min:1280x720 max:1280x720 min:15fps max:25fps\n```\n\nIs converted into an intermedia representation (via the `CaptureConfig`\nutility class) that looks like the following:\n\n```js\n{\n  camera: 0,\n  microphone: 0,\n  res: {\n    min: { w: 1280, h: 720 },\n    max: { w: 1280, h: 720 }\n  },\n\n  fps: {\n    min: 15,\n    max: 25\n  }\n}\n```\n\nWhich in turn is converted into the following media constraints for\na getUserMedia call:\n\n```js\n{\n  audio: true,\n  video: {\n    mandatory: {\n      minFrameRate: 15,\n      maxFrameRate: 25,\n\n      minWidth: 1280,\n      minHeight: 720,\n      maxWidth: 1280,\n      maxHeight: 720\n    },\n\n    optional: []\n  }\n}\n```\n\n### Targeted Device Capture\n\nWhile the `rtc-captureconfig` module itself doesn't contain any media\nidentification logic, it is able to the sources information from a\n`MediaStreamTrack.getSources` call to generate device targeted constraints.\n\nFor instance, the following example demonstrates how we can request\n`camera:1` (the 2nd video device on our local machine) when we are making\na getUserMedia call:\n\n```js\n// load in capture config\nvar capture = require('rtc-captureconfig');\n\n// pull in the getusermedia helper module\n// see: https://github.com/HenrikJoreteg/getUserMedia\nvar getUserMedia = require('getusermedia');\n\n// get the sources\nMediaStreamTrack.getSources(function(sources) {\n  var constraints = capture('camera:1').toConstraints({ sources: sources });\n\n  /* here is an example of what the generated constraints actually look like\n  var constraints = {\n    audio:true,\n    video: {\n      mandatory: {},\n      optional: [\n        { sourceId: '30a3f6408175c22df739bcbf9573d841d9f99289' }\n      ]\n    }\n  };\n  */\n\n  // get user media\n  getUserMedia(constraints, function(err, stream) {\n    if (err) {\n      return console.log('Could not capture stream: ', err);\n    }\n\n    console.log('captured stream: ', stream);\n  });\n});\n```\n\nIt's worth noting that if the requested device does not exist on the\nmachine (in the case above, if your machine only has a single webcam - as\nis common) then no device selection constraints will be generated (i.e.\nthe standard `{ video: true, audio: true }` constraints will be returned\nfrom the `toConstraints` call).\n\n## Reference\n\n### CaptureConfig\n\nThis is a utility class that is used to update capture configuration\ndetails and is able to generate suitable getUserMedia constraints based\non the configuration.\n\n#### camera(index)\n\nUpdate the camera configuration to the specified index\n\n#### microphone(index)\n\nUpdate the microphone configuration to the specified index\n\n#### max(data)\n\nUpdate a maximum constraint.  If an fps constraint this will be directed\nto the `maxfps` modifier.\n\n#### maxfps(data)\n\nUpdate the maximum fps\n\n#### min(data)\n\nUpdate a minimum constraint.  This can be either related to resolution\nor FPS.\n\n#### minfps(data)\n\nUpdate the minimum fps\n\n#### toConstraints(opts?)\n\nConvert the internal configuration object to a valid media constraints\nrepresentation.  In compatible browsers a list of media sources can\nbe passed through in the `opts.sources` to create contraints that will\ntarget a specific device when captured.\n\n```js\nvar media = require('rtc-media');\nvar capture = require('rtc-captureconfig');\n\n// get the sources\nMediaStreamTrack.getSources(function(sources) {\n  // get the cameras\n  var cameras = sources.filter(function(info) {\n    return info && info.kind === 'video';\n  });\n\n  // create videos\n  var videos = cameras.map(function(info, idx) {\n    return media(capture('camera:' + idx).toConstraints({ sources: sources }));\n  });\n\n  // render the videos\n  videos.forEach(function(vid) {\n    vid.render(document.body);\n  });\n});\n```\n\n### \"Internal\" methods\n\n#### _parseRes(data)\n\nParse a resolution specifier (e.g. 1280x720) into a simple JS object\n(e.g. { w: 1280, h: 720 })\n\n## License(s)\n\n### Apache 2.0\n\nCopyright 2013 National ICT Australia Limited (NICTA)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/rtc-io/rtc-captureconfig",
  "_id": "rtc-captureconfig@0.4.0",
  "_from": "rtc-captureconfig@~0.4.0"
}
