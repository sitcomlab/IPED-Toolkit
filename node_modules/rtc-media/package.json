{
  "name": "rtc-media",
  "description": "A simple getUserMedia wrapper",
  "author": {
    "name": "Damon Oehlman",
    "email": "damon.oehlman@nicta.com.au"
  },
  "version": "1.6.2",
  "dependencies": {
    "cog": "~0.5",
    "rtc-core": "^1"
  },
  "scripts": {
    "lint": "jshint *.js",
    "gendocs": "gendocs > README.md"
  },
  "devDependencies": {
    "tape": "^2"
  },
  "testling": {
    "files": "test/all.js",
    "browsers": [
      "chrome/25..canary",
      "firefox/nightly"
    ]
  },
  "main": "index.js",
  "directories": {
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/rtc-io/rtc-media.git"
  },
  "keywords": [
    "webrtc",
    "rtc.io",
    "getusermedia"
  ],
  "license": "Apache 2.0",
  "bugs": {
    "url": "https://github.com/rtc-io/rtc-media/issues"
  },
  "contributors": [
    {
      "name": "Damon Oehlman",
      "email": "damon.oehlman@nicta.com.au",
      "url": "https://github.com/DamonOehlman"
    },
    {
      "name": "Silvia Pfeiffer",
      "email": "silvia.pfeiffer@nicta.com.au",
      "url": "https://github.com/silviapfeiffer"
    }
  ],
  "readme": "# rtc-media\n\nSimple [getUserMedia](http://dev.w3.org/2011/webrtc/editor/getusermedia.html)\ncross-browser wrappers.  Part of the [rtc.io](http://rtc.io/) suite, which is\nsponsored by [NICTA](http://opennicta.com) and released under an\n[Apache 2.0 license](/LICENSE).\n\n\n[![NPM](https://nodei.co/npm/rtc-media.png)](https://nodei.co/npm/rtc-media/)\n\n[![unstable](http://hughsk.github.io/stability-badges/dist/unstable.svg)](http://github.com/hughsk/stability-badges)\n\n## Example Usage\n\nCapturing media on your machine is as simple as:\n\n```js\nrequire('rtc-media')();\n```\n\nWhile this will in fact start the user media capture process, it won't\ndo anything with it.  Lets take a look at a more realistic example:\n\n```js\n// require the media capture helper from rtc.io\nvar media = require('rtc-media');\n\n// capture video and render it to the document body\nmedia().render(document.body);\n```\n\n[run on requirebin](http://requirebin.com/?gist=6085450)\n\nIn the code above, we are creating a new instance of our userMedia wrapper\nusing the `media()` call and then telling it to render to the\n`document.body` once video starts streaming.  We can further expand the\ncode out to the following to aid our understanding of what is going on:\n\n```js\nvar Media = require('rtc-media');\nvar userMedia = new Media({ start: true });\n\nuserMedia.render(document.body);\n```\n\nThe code above is written in a more traditional JS style, but feel free\nto use the first style as it's quite safe (thanks to some checks in the\ncode).\n\n### Events\n\nOnce a media object has been created, it will provide a number of events\nthrough the standard node EventEmitter API.\n\n#### `capture`\n\nThe `capture` event is triggered once the requested media stream has\nbeen captured by the browser.\n\n```js\nvar media = require('rtc-media');\nvar localMedia = require('rtc-media')();\n\nlocalMedia.render(document.body);\nlocalMedia.once('capture', function(stream) {\n  // stream references underlying media stream that was captured\n  console.log('capture complete');\n});\n```\n\n#### `render`\n\nThe `render` event is triggered once the stream has been rendered\nto the any supplied (or created) video elements.\n\nWhile it might seem a little confusing that when the `render` event\nfires that it returns an array of elements rather than a single element\n(which is what is provided when calling the `render` method).\n\nThis occurs because it is completely valid to render a single captured\nmedia stream to multiple media elements on a page.  The `render` event\nis reporting once the render operation has completed for all targets that\nhave been registered with the capture stream.\n\n## Reference\n\n### media\n\n```\nmedia(opts?)\n```\n\nCapture media using the underlying\n[getUserMedia](http://www.w3.org/TR/mediacapture-streams/) API.\n\nThe function accepts a single argument which can be either be:\n\n- a. An options object (see below), or;\n- b. An existing\n  [MediaStream](http://www.w3.org/TR/mediacapture-streams/#mediastream) that\n  the media object will bind to and provide you some DOM helpers for.\n\nThe function supports the following options:\n\n- `capture` - Whether capture should be initiated automatically. Defaults\n  to true, but toggled to false automatically if an existing stream is\n  provided.\n\n- `muted` - Whether the video element created for this stream should be\n  muted.  Default is true but is set to false when an existing stream is\n  passed.\n\n- `constraints` - The constraint option allows you to specify particular\n  media capture constraints which can allow you do do some pretty cool\n  tricks.  By default, the contraints used to request the media are\n  fairly standard defaults:\n\n  ```js\n    {\n      video: {\n        mandatory: {},\n        optional: []\n      },\n      audio: true\n    }\n  ```\n\n### capture\n\n```\ncapture(constraints, callback)\n```\n\nCapture media.  If constraints are provided, then they will\noverride the default constraints that were used when the media object was\ncreated.\n\n### render\n\n```js\nrender(target, opts?, callback?)\n```\n\nRender the captured media to the specified target element.  While previous\nversions of rtc-media accepted a selector string or an array of elements\nthis has been dropped in favour of __one single target element__.\n\nIf the target element is a valid MediaElement then it will become the\ntarget of the captured media stream.  If, however, it is a generic DOM\nelement it will a new Media element will be created that using the target\nas it's parent.\n\nA simple example of requesting default media capture and rendering to the\ndocument body is shown below:\n\n```js\n// require the media capture helper from rtc.io\nvar media = require('rtc-media');\n\n// capture video and render it to the document body\nmedia().render(document.body);\n```\n\nYou may optionally provide a callback to this function, which is\nwill be triggered once each of the media elements has started playing\nthe stream:\n\n```js\nvar media = require('rtc-media');\n\nmedia().render(document.body, function(el) {\n  console.log('captured and playing to media element: ', el);\n});\n```\n\n### stop()\n\nStop the media stream\n\n## Debugging Tips\n\nChrome and Chromium can both be started with the following flag:\n\n```\n--use-fake-device-for-media-stream\n```\n\nThis uses a fake stream for the getUserMedia() call rather than attempting\nto capture the actual camera.  This is useful when doing automated testing\nand also if you want to test connectivity between two browser instances and\nwant to distinguish between the two local videos.\n\n## Internal Methods\n\nThere are a number of internal methods that are used in the `rtc-media`\nimplementation. These are outlined below, but not expected to be of\ngeneral use.\n\n### _prepareElement(opts, element)\n\nThe prepareElement function is used to prepare DOM elements that will\nreceive the media streams once the stream have been successfully captured.\n\n### _bindStream(stream)\n\nBind a stream to previously prepared DOM elements.\n\n### _unbind()\n\nGracefully detach elements that are using the stream from the\ncurrent stream.\n\n### _createObjectUrl(stream)\n\nThis method is used to create an object url that can be attached to a video\nor audio element.  Object urls are cached to ensure only one is created\nper stream.\n\n### _handleSuccess(stream)\n\nHandle the success condition of a `getUserMedia` call.\n\n### _handleFail(evt)\n\nHandle the failure condition of a `getUserMedia` call.\n\n## License(s)\n\n### Apache 2.0\n\nCopyright 2013 National ICT Australia Limited (NICTA)\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/rtc-io/rtc-media",
  "_id": "rtc-media@1.6.2",
  "dist": {
    "shasum": "91e93fa5fad9fb0203a672b9da872dbbd4c45d3e"
  },
  "_from": "rtc-media@^1.6.0",
  "_resolved": "https://registry.npmjs.org/rtc-media/-/rtc-media-1.6.2.tgz"
}
